def happy_number(n: int) -> bool:
    """
    Determine if a number is a happy number.

    A happy number is defined as a number which eventually reaches 1 when replaced by the sum of the square of each digit.
    If it loops endlessly in a cycle that does not include 1, it is not a happy number.

    Parameters:
    n (int): The number to be checked.

    Returns:
    bool: True if the number is a happy number, False otherwise.

    """
    slow = n
    fast = squared_digits_sum(n)
    
    while fast != slow:
        slow = squared_digits_sum(slow)
        fast = squared_digits_sum(squared_digits_sum(fast))
        
    return slow == 1

def squared_digits_sum(n: int) -> int:
    """
    Calculate the sum of the squares of the digits of a number.

    Parameters:
    n (int): The number whose digits are to be squared and summed.

    Returns:
    int: The sum of the squares of the digits of the number.
    """
    digits_sum = 0
    while n > 0:
        n, digit = divmod(n, 10)
        digits_squared = digit * digit
        digits_sum += digits_squared
    return digits_sum

# Approach and Reasoning:
#     -----------------------
#     - The function uses Floyd's Cycle Detection Algorithm (also known as the tortoise and hare algorithm) to detect cycles. Also known as fast and slow pointers.
#     - Two pointers, `slow` and `fast`, are used to traverse the sequence of numbers generated by repeatedly replacing the number with the sum of the squares of its digits.
#     - `slow` moves one step at a time (computes the sum of squares once), while `fast` moves two steps at a time (computes the sum of squares twice).
#     - If there is a cycle (i.e., the number is not happy), `slow` and `fast` will eventually meet at the same number.
#     - If the number is happy, the sequence will eventually reach 1, and the loop will terminate.

#     Time Complexity:
#     ----------------
#     - The time complexity is O(log n), where n is the input number.
#     - The time complexity is O(log_{10}(n)), where n is the input number. This complexity arises from the `squared_digits_sum` function, 
#       as the number of digits in n is proportional to log_{10}(n), and each digit is processed in constant time.

#     Space Complexity:
#     -----------------
#     - The space complexity is O(1) because only a constant amount of extra space is used for variables and function calls.
